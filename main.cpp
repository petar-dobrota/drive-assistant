#include "pins.h"

#include <Arduino.h>
#include <Wire.h>
#include "InputData.h"
#include "RevMatcher.h"
#include "OverrevNotifier.h"
#include "I2CLogger.h"
#include "SanityChecker.h"

// obd adapter pinout:
// rx - white
// tx - green

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBALS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EngineControl engine;
RevMatcher revMatcher(&engine);
OverrevNotifier overrevNotifier;

void beep() {
	pinMode(OVERREV_ALARM_PIN, OUTPUT);
	delay(100);
	pinMode(OVERREV_ALARM_PIN, INPUT);
}

void setup() {
	pinMode(OVERREV_ALARM_PIN, INPUT); // HIGH-Z means alarm OFF
	pinMode(CLUTCH_DOWN_PIN, INPUT);
	pinMode(CLUTCH_PLAY_PIN, INPUT);
	pinMode(FORCE_RM_PIN, INPUT);
	digitalWrite(FORCE_RM_PIN, LOW); // LOW means let original app signal pass
	pinMode(UNUSED1, INPUT);
	pinMode(ENGINE_CTL, OUTPUT);
	pinMode(UNUSED2, INPUT);
	pinMode(UNUSED3, INPUT);
	pinMode(UNUSED4, INPUT);
	pinMode(UNUSED5, INPUT);
	beep();

	Wire.begin();
	InputData::begin();

	InputData::collect();
	SanityChecker::begin(&engine);

	// signal setup complete
	beep();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LOOP
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() {

	InputData::collect();

	overrevNotifier.highRevNotifying();

	//SetRpmTester::setRpmTesting(&engine);
	I2CLogger::logThrottleToRpm();
	revMatcher.revMatching();

}
