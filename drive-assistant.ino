#include <Arduino.h>
#include <Wire.h>
#include <OBD.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// PINS
const unsigned ALARM_PIN = 13;
const unsigned ALARM_SPEAKER_PIN = 10;

// SETTINGS
const int REV_LIMIT = 2500; // TODO: change to 6000
const unsigned ALARM_T_MICROS = 1000000 / 1500;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBALS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

COBDI2C obd;

void setup()
{

  pinMode(ALARM_PIN, OUTPUT);

  obd.begin();
  while (!obd.init());  
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int obdRead(byte pid) {
  int value;
  if (obd.read(pid, value)) {
    return pid;
  } else {
    // TODO: Stop exec
    return -1;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sub coroutines: Called from main coroutines. Routines are doing it's thing while being called.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void alarmRinging() {
  static unsigned long lastTick = 0;

  unsigned long now = micros();

  if (lastTick > now) {
    // timer overflow, hack for this periode
    lastTick = now;
  }

  if (lastTick + ALARM_T_MICROS <= now) {
    // whole periode passed
    digitalWrite(ALARM_SPEAKER_PIN, !digitalRead(ALARM_SPEAKER_PIN));
    lastTick = now;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN CORUTINES: 
// Will be called from main loop.
// Return true if no other co-routines should be called per a this loop
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool highRevNotifying() {
  int rpm = obdRead(PID_RPM);

  if (rpm > REV_LIMIT) {
     digitalWrite(ALARM_PIN, HIGH);
     alarmRinging();
  } else {
    // alarm off
    digitalWrite(ALARM_PIN, LOW);
    digitalWrite(ALARM_SPEAKER_PIN, LOW);
  }

  // high revs notify doesn't interfere with other co-routines
  return false;
}

bool revMatching() {
  // TODO:
  
  return false;
}

bool cruiseControling() {
  // TODO:
  
  return false;
}

bool launchControling() {
  // TODO:
  
  return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LOOP
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop()
{

  if (highRevNotifying()) {
    return;
  }

  if (revMatching()) {
    return;
  }

  if (cruiseControling()) {
    return;
  }

  if (launchControling()) {
    return;
  }
  
}
