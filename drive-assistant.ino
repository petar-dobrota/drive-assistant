#include <Arduino.h>
#include <Wire.h>
#include <OBD.h>
#include "Int64.h"

#include "pins.h"
#include "InputData.h"

#include "RevMatcher.h"
#include "OverrevNotifier.h"

#include "FunctionRecorder.h"
#include "I2CLogger.h"

// obd adapter pinout:
// rx - white
// tx - green

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const float GEAR_RATIOS[5] =
		{ 98.4252f, 59.5613f, 40.1856f, 30.6805f, 23.5658f }; // gearRatio=rpm/v

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBALS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EngineControl engine;
RevMatcher revMatcher(&engine);
OverrevNotifier overrevNotifier;

FunctionRecorder rec;

void beep() {
	digitalWrite(OVERREV_ALARM_PIN, LOW);
	delay(120);
	digitalWrite(OVERREV_ALARM_PIN, HIGH);
}

void setup() {
	pinMode(OVERREV_ALARM_PIN, OUTPUT);
	digitalWrite(OVERREV_ALARM_PIN, HIGH); // HIGH means OFF
	pinMode(CLUTCH_DOWN_PIN, INPUT);
	pinMode(CLUTCH_PLAY_PIN, INPUT);
	pinMode(FORCE_RM_PIN, INPUT);
	digitalWrite(FORCE_RM_PIN, LOW); // LOW means let original app signal pass
	pinMode(UNUSED1, INPUT);
	pinMode(ENGINE_CTL, OUTPUT);
	pinMode(UNUSED2, INPUT);
	pinMode(UNUSED3, INPUT);
	pinMode(SD_CS, OUTPUT);

	InputData::begin();
	Wire.begin();
	rec.begin();

	// signal setup complete
	beep();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LOOP
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() {

	InputData::collect();

	overrevNotifier.highRevNotifying();

	if (rec.recording(&engine)) {
		return;
	}

	I2CLogger::logThrottleToRpm();
	
	if (revMatcher.revMatching()) {
		return;
	}

	// TODO: cruiseControling, launchControling

}
