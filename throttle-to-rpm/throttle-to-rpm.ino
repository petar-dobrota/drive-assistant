#include <U8glib.h>
#include "utility\u8g.h"

#include <Arduino.h>
#include <OBD.h>
#include <SD.h>
#include <DataLogger.h>


// obd adapter pinout:
// rx - white
// tx - green

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTANTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// PINS
const unsigned ALARM_PIN = 13;

const unsigned SD_CS_PIN = 10; // orange
// miso 12 yellow
// mosi 11 blue
// sck  13 white
const unsigned THROTTLE_POS_PIN = A0;

// TEST: DELETE
const unsigned TEST_0_PIN = 2;
const unsigned TEST_1_PIN = 3;
const unsigned TEST_2_PIN = 4;

const unsigned F_NAME_LEN = 13;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBALS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

COBD obd;
int currRpm;
DataLogger logger;
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);

void signalError(const char *err) {
  digitalWrite(TEST_0_PIN, LOW);
  if (err != 0) {
    u8g.drawStr( 0, 22, err);
  }
  while(true);
}
void signalError() {
  signalError(0);
}

void setup()
{

  pinMode(ALARM_PIN, OUTPUT);

  pinMode(TEST_0_PIN, OUTPUT);
  pinMode(TEST_1_PIN, OUTPUT);
  pinMode(TEST_2_PIN, OUTPUT);
  
  digitalWrite(TEST_0_PIN, HIGH);
  digitalWrite(TEST_1_PIN, HIGH);
  digitalWrite(TEST_2_PIN, HIGH);

  if (!logger.begin(SD_CS_PIN)) {
    signalError("log init F");
  }

  obd.begin();
  while (!obd.init());  
  u8g.setFont(u8g_font_u8glib_4);
  u8g.drawStr( 0, 22, "Perica KRALJ!");
  

  digitalWrite(TEST_1_PIN, LOW);
  u8g.drawStr( 0, 22, "Init OK");
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int obdRead(byte pid) {
  int value;
  if (obd.read(pid, value)) {
    return value;
  } else {
    // TODO: Stop exec
    return -1;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN CORUTINES: 
// Will be called from main loop.
// Return true if no other co-routines should be called per a this loop
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void fMonitoring() {
  int throttlePos = analogRead(THROTTLE_POS_PIN);
  
  File f = logger.startLogging();

  f.print(millis());
  f.print(", ");
  
  f.print(throttlePos);
  f.print(", ");
  
  f.print(currRpm);
  f.print('\n');

  f.flush();
  f.close();
}

void fPrinting(float throttlePos) {
  static unsigned long repaintDelayMillis = 100;
  static unsigned long lastPrintTime = 0;

  unsigned long currentTime = millis();
  
  // patch timer overflow
  if (currentTime < lastPrintTime) {
    lastPrintTime = currentTime;
  }

  if (lastPrintTime + repaintDelayMillis < currentTime) {
    // should repaint
    lastPrintTime = currentTime;

    char buff[20];
    //sprintf(buff, "%d\% at %d", (int)(throttlePos*100), currRpm); 
    u8g.drawStr( 0, 22, buff);
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LOOP
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop()
{

  // TODO: OBD READS
  currRpm = obdRead(PID_RPM);

  fMonitoring();

  delay(50);
}
